<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch 
	   					   http://www.springframework.org/schema/batch/spring-batch-3.0.xsd        
	   					   http://www.springframework.org/schema/beans 
	   					   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	<import resource="classpath:context-model.xml" />

	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<!-- Creamos este Bean para poder usar las conexiones del Pool al crear 
		un DAO y hacer consulas -->
	<bean id="hibernateSessionFactory"
		class="com.rci.ptcp.springbatch.dao.HibernateSessionFactory"></bean>

	<bean id="cpsDAO"
		class="com.rci.ptcp.springbatch.dao.CodigosPostalesDAO"></bean>

	<!-- JobRepository and JobLauncher are configuration/setup classes -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<!-- ItemReader reads a complete line one by one from input file -->
	<bean id="flatFileItemReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource"
			value="file:${file.codigosPostales}" />
		<!-- <property name="resource" value="classpath:todos_cp.txt" /> -->

		<property name="lineMapper">

			<bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<property name="fieldSetMapper">
					<!-- Mapper which maps each individual items in a record to properties 
						in POJO -->
					<bean
						class="com.rci.ptcp.springbatch.CodigosPostalesFieldSetMapper" />
				</property>

				<property name="lineTokenizer">
					<!-- A tokenizer class to be used when items in input record are separated 
						by specific characters -->
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value=";" />
					</bean>
				</property>

			</bean>

		</property>

	</bean>

	<!-- ItemWriter which writes data to database -->
	<bean id="databaseItemWriter"
		class="org.springframework.batch.item.database.HibernateItemWriter">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Optional ItemProcessor to perform business logic/filtering on the input 
		records -->
	<bean id="itemProcessor"
		class="com.rci.ptcp.springbatch.CodigosPostalesItemProcessor" />

	<!-- Optional JobExecutionListener to perform business logic before and 
		after the job -->
	<bean id="jobListener"
		class="com.rci.ptcp.springbatch.CodigosPostalesJobListener" />

	<!-- Custom Skip Listener -->
	<bean id="customSkipListener" class="com.rci.ptcp.springbatch.CustomSkipListener" />
	
	<!-- Actual Job -->
	<batch:job id="cpsPTResultJob">
		<batch:step id="step1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="flatFileItemReader"
					writer="databaseItemWriter" processor="itemProcessor"
					commit-interval="500" skip-limit="2000">
					<batch:skippable-exception-classes>
						<batch:include class="java.lang.Exception"/>
					</batch:skippable-exception-classes>
					<batch:listeners>
						<batch:listener ref="customSkipListener" />
					</batch:listeners>
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>

</beans>  